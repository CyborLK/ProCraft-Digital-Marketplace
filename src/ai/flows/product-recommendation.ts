// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides personalized product recommendations based on user browsing history.
 *
 * - getProductRecommendations - A function that returns product recommendations for a user.
 * - ProductRecommendationInput - The input type for the getProductRecommendations function.
 * - ProductRecommendationOutput - The return type for the getProductRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProductRecommendationInputSchema = z.object({
  browsingHistory: z
    .array(z.string())
    .describe('An array of product IDs representing the user\'s browsing history.'),
  numberOfRecommendations: z
    .number()
    .default(3)
    .describe('The number of product recommendations to return.'),
});
export type ProductRecommendationInput = z.infer<
  typeof ProductRecommendationInputSchema
>;

const ProductRecommendationOutputSchema = z.object({
  recommendations: z
    .array(z.string())
    .describe('An array of product IDs that are recommended for the user.'),
});
export type ProductRecommendationOutput = z.infer<
  typeof ProductRecommendationOutputSchema
>;

export async function getProductRecommendations(
  input: ProductRecommendationInput
): Promise<ProductRecommendationOutput> {
  return productRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'productRecommendationPrompt',
  input: {schema: ProductRecommendationInputSchema},
  output: {schema: ProductRecommendationOutputSchema},
  prompt: `You are a product recommendation expert. Given a user's browsing history, you will recommend products that the user might be interested in.

Browsing History: {{browsingHistory}}

Recommend {{numberOfRecommendations}} products.  Respond ONLY with a JSON array of product IDs.`,
});

const productRecommendationFlow = ai.defineFlow(
  {
    name: 'productRecommendationFlow',
    inputSchema: ProductRecommendationInputSchema,
    outputSchema: ProductRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
